{"version":3,"sources":["tokentype.js"],"names":[],"mappings":"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","file":"tokentype-compiled.js","sourcesContent":["// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nexport class TokenType {\n  constructor(label, conf = {}) {\n    this.label = label\n    this.keyword = conf.keyword\n    this.beforeExpr = !!conf.beforeExpr\n    this.startsExpr = !!conf.startsExpr\n    this.isLoop = !!conf.isLoop\n    this.isAssign = !!conf.isAssign\n    this.prefix = !!conf.prefix\n    this.postfix = !!conf.postfix\n    this.binop = conf.binop || null\n    this.updateContext = null\n  }\n}\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nconst beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true}\n\nexport const types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true})\n}\n\n// Map keyword names to token types.\n\nexport const keywords = {}\n\n// Succinct definitions of keyword token types\nfunction kw(name, options = {}) {\n  options.keyword = name\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options)\n}\n\nkw(\"break\")\nkw(\"case\", beforeExpr)\nkw(\"catch\")\nkw(\"continue\")\nkw(\"debugger\")\nkw(\"default\", beforeExpr)\nkw(\"do\", {isLoop: true, beforeExpr: true})\nkw(\"else\", beforeExpr)\nkw(\"finally\")\nkw(\"for\", {isLoop: true})\nkw(\"function\", startsExpr)\nkw(\"if\")\nkw(\"return\", beforeExpr)\nkw(\"switch\")\nkw(\"throw\", beforeExpr)\nkw(\"try\")\nkw(\"var\")\nkw(\"const\")\nkw(\"while\", {isLoop: true})\nkw(\"with\")\nkw(\"new\", {beforeExpr: true, startsExpr: true})\nkw(\"this\", startsExpr)\nkw(\"super\", startsExpr)\nkw(\"class\")\nkw(\"extends\", beforeExpr)\nkw(\"export\")\nkw(\"import\")\nkw(\"null\", startsExpr)\nkw(\"true\", startsExpr)\nkw(\"false\", startsExpr)\nkw(\"in\", {beforeExpr: true, binop: 7})\nkw(\"instanceof\", {beforeExpr: true, binop: 7})\nkw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true})\nkw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true})\nkw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n"]}