{"version":3,"sources":["node.js"],"names":[],"mappings":"AAAA,SAAQ,MAAR,QAAqB,SAArB;AACA,SAAQ,cAAR,QAA6B,WAA7B;;AAEA,OAAO,MAAM,IAAN,CAAW;AAChB,cAAY,MAAZ,EAAoB,GAApB,EAAyB,GAAzB,EAA8B;AAC5B,SAAK,IAAL,GAAY,EAAZ;AACA,SAAK,KAAL,GAAa,GAAb;AACA,SAAK,GAAL,GAAW,CAAX;AACA,QAAI,OAAO,OAAP,CAAe,SAAnB,EACE,KAAK,GAAL,GAAW,IAAI,cAAJ,CAAmB,MAAnB,EAA2B,GAA3B,CAAX;AACF,QAAI,OAAO,OAAP,CAAe,gBAAnB,EACE,KAAK,UAAL,GAAkB,OAAO,OAAP,CAAe,gBAAjC;AACF,QAAI,OAAO,OAAP,CAAe,MAAnB,EACE,KAAK,KAAL,GAAa,CAAC,GAAD,EAAM,CAAN,CAAb;AACH;AAXe;;;;AAgBlB,MAAM,KAAK,OAAO,SAAlB;;AAEA,GAAG,SAAH,GAAe,YAAW;AACxB,SAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAK,KAApB,EAA2B,KAAK,QAAhC,CAAP;AACD,CAFD;;AAIA,GAAG,WAAH,GAAiB,UAAS,GAAT,EAAc,GAAd,EAAmB;AAClC,SAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,GAAf,EAAoB,GAApB,CAAP;AACD,CAFD;;;;AAMA,SAAS,YAAT,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,GAAlC,EAAuC,GAAvC,EAA4C;AAC1C,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,GAAL,GAAW,GAAX;AACA,MAAI,KAAK,OAAL,CAAa,SAAjB,EACE,KAAK,GAAL,CAAS,GAAT,GAAe,GAAf;AACF,MAAI,KAAK,OAAL,CAAa,MAAjB,EACE,KAAK,KAAL,CAAW,CAAX,IAAgB,GAAhB;AACF,SAAO,IAAP;AACD;;AAED,GAAG,UAAH,GAAgB,UAAS,IAAT,EAAe,IAAf,EAAqB;AACnC,SAAO,aAAa,IAAb,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,KAAK,UAAzC,EAAqD,KAAK,aAA1D,CAAP;AACD,CAFD;;;;AAMA,GAAG,YAAH,GAAkB,UAAS,IAAT,EAAe,IAAf,EAAqB,GAArB,EAA0B,GAA1B,EAA+B;AAC/C,SAAO,aAAa,IAAb,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,GAApC,EAAyC,GAAzC,CAAP;AACD,CAFD","file":"node-compiled.js","sourcesContent":["import {Parser} from \"./state\"\nimport {SourceLocation} from \"./locutil\"\n\nexport class Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  }\n}\n\n// Start an AST node, attaching a start offset.\n\nconst pp = Parser.prototype\n\npp.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n}\n\npp.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n}\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type\n  node.end = pos\n  if (this.options.locations)\n    node.loc.end = loc\n  if (this.options.ranges)\n    node.range[1] = pos\n  return node\n}\n\npp.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n}\n\n// Finish node at given position\n\npp.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n}\n"]}