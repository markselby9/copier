{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,aAAa,QAAQ,WAAR,CAAjB;AACA,SAAS,sBAAT,EAAiC,YAAY;AACzC,SAAK,OAAL;AACH,CAFD;AAGA,IAAI,CAAC,QAAQ,OAAb,EAAsB;AACpB,aAAS,uBAAT,EAAkC,YAAY;AAC5C,aAAK,UAAL;AACD,KAFD;AAGD;AACD,SAAS,IAAT,CAAe,UAAf,EAA2B;AACvB,aAAS,gBAAT,EAA2B,UAAU,CAAV,EAAa;AACpC,WAAI,OAAJ,EAAa,UAAU,IAAV,EAAgB;AAC3B,gBAAI,QAAQ,CAAZ;;AAGA,uBAAW,QAAX,CAAoB,UAAU,GAAV,EAAe;AAC/B,uBAAO,KAAP,CAAa,GAAb,EAAkB,OAAlB,EAA2B,iBAA3B;AACA,2BAAW,QAAX,CAAoB,UAAU,GAAV,EAAe;AACjC,2BAAO,KAAP,CAAa,GAAb,EAAkB,OAAlB,EAA2B,sBAA3B;AACD,iBAFD,EAEG,CAFH;AAGH,aALD,EAKG,CALH;AAMA,uBAAW,QAAX,CAAoB,UAAU,GAAV,EAAe;AAC/B,uBAAO,KAAP,CAAa,GAAb,EAAkB,OAAlB,EAA2B,mBAA3B;AACA,2BAAW,QAAX,CAAoB,UAAU,GAAV,EAAe;AACjC,2BAAO,KAAP,CAAa,GAAb,EAAkB,OAAlB,EAA2B,eAA3B;AACA,+BAAW,QAAX,CAAoB,UAAU,GAAV,EAAe;AAC/B,+BAAO,KAAP,CAAa,GAAb,EAAkB,OAAlB,EAA2B,cAA3B;AACA;AACH,qBAHD,EAGG,CAHH;AAIH,iBANC,EAMC,CAND;AAOH,aATD,EASG,CATH;AAUA,uBAAW,QAAX,CAAoB,UAAU,GAAV,EAAe;;AAE/B,uBAAO,KAAP,CAAa,GAAb,EAAkB,OAAlB,EAA2B,wCAA3B;AACH,aAHD,EAGG,CAHH;AAID,SAxBD;AAyBH,KA1BD;;AA4BA,aAAS,aAAT,EAAwB,UAAU,CAAV,EAAa;AACjC,WAAI,OAAJ,EAAa,UAAU,IAAV,EAAgB;AAC7B,gBAAI,QAAQ,CAAZ;AACA,oBAAQ,kBAAR,CAA2B,mBAA3B;AACA,oBAAQ,IAAR,CAAa,mBAAb,EAAkC,UAAS,GAAT,EAAc;AAC5C,uBAAO,KAAP,CAAa,CAAb,EAAgB,OAAhB,EAAyB,gBAAzB;AACA,2BAAW,QAAX,CAAoB,YAAY;AAC5B,2BAAO,KAAP,CAAa,CAAb,EAAgB,OAAhB,EAAyB,6BAAzB;AACA;AACH,iBAHD;AAIH,aAND;AAOA,uBAAW,QAAX,CAAoB,YAAY;AAC5B,uBAAO,KAAP,CAAa,CAAb,EAAgB,OAAhB,EAAyB,iBAAzB;AACA,2BAAW,QAAX,CAAoB,YAAY;AAChC,2BAAO,KAAP,CAAa,CAAb,EAAgB,OAAhB,EAAyB,sBAAzB;AACC,iBAFD;AAGH,aALD;AAMA,uBAAW,QAAX,CAAoB,YAAY;AAC5B,uBAAO,KAAP,CAAa,CAAb,EAAgB,OAAhB,EAAyB,mBAAzB;AACA,sBAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACH,aAHD;AAIA,uBAAW,QAAX,CAAoB,YAAY;AAC5B,uBAAO,KAAP,CAAa,CAAb,EAAgB,OAAhB,EAAyB,wCAAzB;AACH,aAFD;AAGC,SAvBD;AAwBH,KAzBD;AA0BH","file":"test-compiled.js","sourcesContent":["var assert = require('assert');\nvar ourProcess = require('./browser');\ndescribe('test against process', function () {\n    test(process);\n});\nif (!process.browser) {\n  describe('test against our shim', function () {\n    test(ourProcess);\n  });\n}\nfunction test (ourProcess) {\n    describe('test arguments', function (t) {\n        it ('works', function (done) {\n          var order = 0;\n\n\n          ourProcess.nextTick(function (num) {\n              assert.equal(num, order++, 'first one works');\n              ourProcess.nextTick(function (num) {\n                assert.equal(num, order++, 'recursive one is 4th');\n              }, 3);\n          }, 0);\n          ourProcess.nextTick(function (num) {\n              assert.equal(num, order++, 'second one starts');\n              ourProcess.nextTick(function (num) {\n                assert.equal(num, order++, 'this is third');\n                ourProcess.nextTick(function (num) {\n                    assert.equal(num, order++, 'this is last');\n                    done();\n                }, 5);\n            }, 4);\n          }, 1);\n          ourProcess.nextTick(function (num) {\n\n              assert.equal(num, order++, '3rd schedualed happens after the error');\n          }, 2);\n        });\n    });\n\n    describe('test errors', function (t) {\n        it ('works', function (done) {\n        var order = 0;\n        process.removeAllListeners('uncaughtException');\n        process.once('uncaughtException', function(err) {\n            assert.equal(2, order++, 'error is third');\n            ourProcess.nextTick(function () {\n                assert.equal(5, order++, 'schedualed in error is last');\n                done();\n            });\n        });\n        ourProcess.nextTick(function () {\n            assert.equal(0, order++, 'first one works');\n            ourProcess.nextTick(function () {\n            assert.equal(4, order++, 'recursive one is 4th');\n            });\n        });\n        ourProcess.nextTick(function () {\n            assert.equal(1, order++, 'second one starts');\n            throw(new Error('an error is thrown'));\n        });\n        ourProcess.nextTick(function () {\n            assert.equal(3, order++, '3rd schedualed happens after the error');\n        });\n        });\n    });\n}\n"]}